
// src/services/localUtility.ts

// Aligned with local agent specifications
interface PhotographerInfo { // As defined by local utility developer
    id: string;
    name: string;
    email?: string;
    cameraSerials?: string[];
    // preferredRawFormat?: RawFormat; // Assuming RawFormat is a string or enum defined elsewhere if needed
    notes?: string;
}

export interface IngestJobRequest { // HIVE sends this structure in the POST /ingest body if it were to initiate
    photographer: PhotographerInfo;
    photographerCameraSerial?: string;
    eventId: string;
    sourcePaths: string[];
    workingPath: string;
    backupPath: string;
}

export interface IngestJobStatus {
  jobId: string;
  status: 'pending' | 'processing_files' | 'copying' | 'checksumming' | 'completed' | 'failed' | 'cancelled';
  progress?: number; // Overall job progress percentage
  message?: string; // Current status message
  filesProcessed?: number; // Number of files successfully copied/processed by the agent
  filesMatchedToEvents?: number; // Optional: Number of files agent specifically matched to event criteria
  filesUnmatched?: number; // Optional: Number of files processed but not matched to event criteria
  totalFiles?: number; // Total files detected in source (if known)
  totalSizeMB?: number; // Total size of processed files in MB
  checksumResult?: 'pending' | 'passed' | 'failed' | 'not_run';
  errors?: string[];
  reportUrl?: string; // Optional: A URL to a more detailed report generated by the local utility
}

interface AvailableDrivesResponse {
    locations: Array<{ path: string; [key: string]: any }>;
}

class LocalUtilityService {
  private baseUrl = 'http://localhost:8765';

  async getAvailableDrives(): Promise<AvailableDrivesResponse> {
    const response = await fetch(`${this.baseUrl}/available-drives`);
    if (!response.ok) {
      const errorText = await response.text();
      console.error('LocalUtilityService getAvailableDrives error response:', errorText);
      const errorData = JSON.parse(errorText || '{}');
      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
    }
    return await response.json() as AvailableDrivesResponse;
  }

  // This method is NOT directly called by HIVE in the current workflow where user enters Job ID.
  // It's kept for completeness of what HIVE *could* send if it initiated the job.
  async startIngest(request: IngestJobRequest): Promise<{ jobId: string, message?: string }> {
    const response = await fetch(`${this.baseUrl}/ingest`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(request),
    });
    if (!response.ok) {
      const errorText = await response.text();
      console.error('LocalUtilityService startIngest error response:', errorText);
      const errorData = JSON.parse(errorText || '{}');
      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
    }
    return await response.json();
  }

  async getJobStatus(jobId: string): Promise<IngestJobStatus> {
    if (!jobId || jobId.trim() === "") {
        throw new Error("Job ID cannot be empty when checking status.");
    }
    const response = await fetch(`${this.baseUrl}/ingest-status/${jobId}`);
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`LocalUtilityService getJobStatus for ${jobId} error response:`, errorText);
      const errorData = JSON.parse(errorText || '{}');
      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
    }
    return await response.json();
  }

  // Conceptual endpoints based on local agent specs (HIVE doesn't call these directly yet)
  // async listPhotographers(): Promise<PhotographerInfo[]> {
  //   const response = await fetch(`${this.baseUrl}/photographers`);
  //   if (!response.ok) throw new Error('Failed to list photographers from local agent');
  //   return await response.json();
  // }

  // async getUnrecognizedSerials(): Promise<string[]> {
  //   const response = await fetch(`${this.baseUrl}/photographers/unrecognized-serials`);
  //   if (!response.ok) throw new Error('Failed to get unrecognized serials from local agent');
  //   return await response.json();
  // }

  // async registerCameraSerial(photographerId: string, serial: string): Promise<any> {
  //   const response = await fetch(`${this.baseUrl}/photographers/${photographerId}/camera-serial`, {
  //     method: 'POST',
  //     headers: { 'Content-Type': 'application/json' },
  //     body: JSON.stringify({ serial }),
  //   });
  //   if (!response.ok) throw new Error('Failed to register camera serial with local agent');
  //   return await response.json();
  // }
}

export const localUtility = new LocalUtilityService();
